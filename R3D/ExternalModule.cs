/*
 * Copyright (C) 2008 R3D Development Team
 * 
 * R3D is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * R3D is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with R3D.  If not, see <http://www.gnu.org/licenses/>.
 */
using System;
using System.Collections.Generic;
using System.Text;

using System.Reflection;
using System.Security.Cryptography;

using R3D.IO;
using System.IO;

namespace R3D
{
    public abstract class ExternalModule
    {
        protected Assembly assembly;

        protected ExternalModule(R3D.IO.ResourceLocation fl, bool checkPdb)
        {
            IO.FileLocation pdbFile = null;

            if (checkPdb)
            {
                FileLocation fileLoc = fl as FileLocation;
                if (fileLoc != null)
                {
                    string path = FileSystem.Instance.GetPath(fileLoc.Path);
                    string fn = Path.GetFileNameWithoutExtension(fileLoc.Path);

                    string pdbPath = path + fn + ".pdb";
                    pdbFile = FileSystem.Instance.TryLocate(pdbPath, FileSystem.GameResLR);
                    //if (pdbFile != null)                                                   
                }
            }

            ArchiveBinaryReader br = new ArchiveBinaryReader(fl);
            if (pdbFile != null)
            {
                ArchiveBinaryReader pdbBr = new ArchiveBinaryReader(pdbFile);
                assembly = Assembly.Load(br.ReadBytes(fl.Size), pdbBr.ReadBytes(pdbFile.Size));
                pdbBr.Close();
            }
            else
            {
                assembly = Assembly.Load(br.ReadBytes(fl.Size));
            }

            br.Close();

            Load();
        }
        protected ExternalModule(R3D.IO.ResourceLocation fl, bool allowEnc, bool checkPdb)
        {
            IO.FileLocation pdbFile = null;

            if (checkPdb)
            {
                FileLocation fileLoc = fl as FileLocation;
                if (fileLoc != null)
                {
                    string path = FileSystem.Instance.GetPath(fileLoc.Path);
                    string fn = Path.GetFileNameWithoutExtension(fileLoc.Path);

                    string pdbPath = path + fn + ".pdb";
                    pdbFile = FileSystem.Instance.TryLocate(pdbPath, FileSystem.GameResLR);
                    //if (pdbFile != null)                                                   
                }
            }

            ArchiveBinaryReader br = new ArchiveBinaryReader(fl);            
            byte[] bytes = br.ReadBytes(fl.Size);
            br.Close();

            try
            {
                if (pdbFile != null)
                {
                    ArchiveBinaryReader pdbBr = new ArchiveBinaryReader(pdbFile);
                    assembly = Assembly.Load(br.ReadBytes(fl.Size), pdbBr.ReadBytes(pdbFile.Size));
                    pdbBr.Close();
                }
                else
                {
                    assembly = Assembly.Load(bytes);
                    bytes = null;
                }
            }
            catch (BadImageFormatException)
            {
                GameConsole.Instance.Write(ResourceAssembly.Instance.CM_AssemblyEncrypted(fl.ToString()));

                if (allowEnc)
                {
                    //RSAParameters param;
                    //param.Exponent = new byte[]
                    //{
                    //    0xBE, 0xFF, 0x21, 0x36, 0x51, 0xAF, 0x00, 0x55, 0x68, 0xC8, 0x13, 0x0D, 0x15, 0x7A, 0x11, 0x20,
                    //    0x63, 0xF9, 0xE2, 0x5C, 0xE8, 0xCC, 0xA8, 0x68, 0x94, 0xB4, 0x6D, 0x02, 0xC1, 0x7B, 0x66, 0x02,
                    //    0x8C, 0xAC, 0xD6, 0x80, 0x4B, 0x20, 0xFC, 0xE6, 0x38, 0xFF, 0x5C, 0xB8, 0x9A, 0xCD, 0x24, 0x8D,
                    //    0x2F, 0x18, 0x10, 0x7D, 0x6D, 0x09, 0x6F, 0xF6, 0xAC, 0xA4, 0x4D, 0x91, 0x53, 0x4B, 0x41, 0xFF,
                    //    0xC2, 0x44, 0xD5, 0x20, 0xCB, 0xF3, 0xAA, 0x48, 0xAC, 0x8A, 0xE9, 0x43, 0x7C, 0x0E, 0x54, 0x80,
                    //    0x06, 0x03, 0xB4, 0x45, 0x3B, 0xB5, 0x41, 0x64, 0xF3, 0xED, 0x93, 0x17, 0xB7, 0xC2, 0x55, 0x75,
                    //    0xA9, 0xF6, 0xE3, 0x39, 0x0A, 0xD9, 0x2C, 0xD0, 0x28, 0x4E, 0x4C, 0x78, 0x49, 0x6E, 0xFA, 0x89,
                    //    0x19, 0x14, 0x2B, 0x3E, 0xAB, 0x7D, 0xF9, 0x52, 0x8B, 0xA7, 0x09, 0xA3, 0x0E, 0xB8, 0x93, 0x9B
                    //};
                    //param.Modulus = new byte[] { 0x01, 0x00, 0x01 };
                    //param.D = new byte[]
                    //{
                    //    0xB1, 0xE2, 0x90, 0x9E, 0x34, 0xA9, 0x96, 0xD7, 0xF5, 0x45, 0x12, 0x69, 0x47, 0x2D, 0x6F, 0x32,
                    //    0x09, 0xAB, 0x3C, 0x26, 0x68, 0x33, 0xE4, 0x4D, 0xB2, 0xE1, 0xEF, 0xFD, 0x77, 0x12, 0x64, 0xC9,
                    //    0xCF, 0x17, 0x52, 0x98, 0x1E, 0x60, 0xD4, 0xE9, 0xDF, 0x00, 0x06, 0xED, 0x70, 0x4F, 0xCB, 0xD1,
                    //    0x2A, 0xA1, 0x71, 0x0A, 0x40, 0x39, 0x5F, 0xEC, 0x10, 0x92, 0xDE, 0x23, 0x91, 0xBE, 0x2F, 0xF2,
                    //    0x54, 0x10, 0x02, 0xE3, 0x8A, 0x18, 0x6B, 0x8B, 0xC5, 0x2F, 0x2D, 0x33, 0x37, 0xEE, 0x25, 0x32,
                    //    0x84, 0xFD, 0x34, 0x93, 0x2B, 0xD6, 0xB3, 0x8B, 0xC9, 0xDA, 0xCF, 0xFC, 0x07, 0xB3, 0x51, 0xA3,
                    //    0x96, 0x77, 0x5D, 0x7F, 0x9B, 0x88, 0xE6, 0xA7, 0x92, 0xB2, 0x76, 0xEE, 0x24, 0x21, 0x82, 0x92,
                    //    0x39, 0xCA, 0x37, 0xE6, 0xD2, 0x34, 0x1F, 0x97, 0xBE, 0xA7, 0x79, 0xA7, 0x45, 0xE6, 0x4C, 0xC1
                    //};
                    //param.DP = new byte[]
                    //{
                    //    0x6B, 0xBA, 0x26, 0x7F, 0x3F, 0x7D, 0xC7, 0xF4, 0x5E, 0x77, 0xDC, 0xA7, 0xC4, 0x3C, 0xAA, 0x95,
                    //    0x58, 0x3A, 0x2A, 0x7C, 0x59, 0xC7, 0xE3, 0xE5, 0x59, 0xC2, 0x56, 0x7D, 0xFF, 0x34, 0xE8, 0xD2,
                    //    0x5F, 0x9E, 0x0C, 0x61, 0x57, 0x3F, 0xAA, 0x07, 0xBD, 0xC5, 0x2A, 0x77, 0xD2, 0x75, 0xD0, 0xAF,
                    //    0xE9, 0x37, 0x16, 0x4B, 0xE0, 0xE4, 0x96, 0x02, 0x45, 0x1E, 0x29, 0x7E, 0xCF, 0xFA, 0xA3, 0xDD
                    //};
                    //param.DQ = new byte[]
                    //{
                    //    0x5C, 0xDD, 0x76, 0x9D, 0x9C, 0x3A, 0xF4, 0x0C, 0xA8, 0x7E, 0x8A, 0x67, 0xA3, 0xBC, 0x6B, 0xAB,
                    //    0x35, 0x19, 0xE1, 0x8C, 0xEB, 0xC0, 0x9E, 0x7E, 0x94, 0x3A, 0xF8, 0xB6, 0x78, 0xBB, 0x3F, 0x29,
                    //    0x68, 0x25, 0x74, 0x54, 0x4C, 0xEB, 0x69, 0xAA, 0xBE, 0x2E, 0xE4, 0x85, 0x07, 0x93, 0x93, 0x54,
                    //    0xF5, 0xB2, 0xA9, 0x05, 0x8F, 0xB8, 0xB0, 0x90, 0x3E, 0x9F, 0x85, 0xCF, 0xAC, 0x5E, 0x6E, 0xE1
                    //};
                    //param.InverseQ = new byte[]
                    //{
                    //    0x90, 0x0F, 0xE6, 0xB8, 0xDC, 0x5A, 0xA0, 0xD4, 0x8B, 0xFC, 0x3D, 0xE7, 0xBB, 0x36, 0x14, 0x5B,
                    //    0xAD, 0x61, 0x48, 0x02, 0x6B, 0x47, 0x77, 0xDA, 0x11, 0x88, 0x85, 0x1D, 0x68, 0x57, 0xD1, 0x67,
                    //    0x7F, 0xF2, 0xBF, 0x23, 0x85, 0xA6, 0xDB, 0x5C, 0x01, 0xB6, 0x63, 0xDA, 0xB4, 0x81, 0x20, 0xA0,
                    //    0x76, 0x47, 0xF2, 0x97, 0x53, 0xC8, 0xD3, 0x25, 0x31, 0xA5, 0x33, 0xF5, 0x79, 0x61, 0x89, 0x19
                    //};
                    //param.P = new byte[]
                    //{
                    //    0xF7, 0x6D, 0x99, 0xD7, 0x9B, 0xEB, 0x9C, 0x77, 0xFD, 0xF4, 0xDD, 0xFE, 0x64, 0xA1, 0x8D, 0x80,
                    //    0xA9, 0x86, 0x9E, 0x5B, 0x27, 0xC8, 0x6D, 0x12, 0x5E, 0xFD, 0x78, 0xE3, 0x6E, 0x65, 0x86, 0x4C,
                    //    0xFB, 0x48, 0xDE, 0x59, 0xB6, 0xD5, 0xDC, 0xB7, 0xBD, 0x5D, 0xAF, 0x68, 0x19, 0x3E, 0x46, 0x35,
                    //    0xE2, 0x2B, 0x3D, 0x4D, 0xBD, 0xEF, 0xA9, 0x5B, 0xC5, 0xF0, 0x4E, 0x10, 0x20, 0x62, 0x13, 0xEB
                    //};
                    //param.Q = new byte[]
                    //{
                    //    0xC5, 0x9D, 0x0C, 0x03, 0x04, 0x1C, 0x65, 0x9A, 0xFE, 0x8C, 0x09, 0x07, 0x50, 0xE0, 0xE4, 0x04,
                    //    0x98, 0x41, 0x7D, 0x38, 0xD9, 0x8F, 0x78, 0x9A, 0x90, 0x47, 0xA8, 0xC4, 0x50, 0x46, 0xF3, 0xC9,
                    //    0x55, 0x41, 0xE2, 0xFD, 0x00, 0x58, 0xC3, 0x49, 0xED, 0x7E, 0x73, 0x92, 0x94, 0x21, 0x01, 0xD1,
                    //    0x07, 0x20, 0xF4, 0xA5, 0xB8, 0x00, 0x66, 0xBF, 0x35, 0x2E, 0x00, 0xE4, 0x1B, 0x0C, 0x83, 0x11
                    //};
                    RSAParameters param;
                    param.Exponent = new byte[8 * 16];
                    param.Modulus = new byte[3];
                    param.D = new byte[8 * 16];
                    param.DP = new byte[4 * 16];
                    param.DQ = new byte[4 * 16];
                    param.InverseQ = new byte[4 * 16];
                    param.P = new byte[4 * 16];
                    param.Q = new byte[4 * 16];
                    unsafe 
                    {
                        fixed (void* ptr = &param.Exponent[0])
                        {
                            R3D.Crypto.Decoder.Decode5(ptr);
                        }
                    }

                    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
                    rsa.ImportParameters(param);

                    if (pdbFile != null)
                    {
                        ArchiveBinaryReader pdbBr = new ArchiveBinaryReader(pdbFile);
                        assembly = Assembly.Load(rsa.Decrypt(bytes, false), pdbBr.ReadBytes(pdbFile.Size));
                        pdbBr.Close();
                        bytes = null;
                    }
                    else
                    {
                        assembly = Assembly.Load(rsa.Decrypt(bytes, false));
                        bytes = null;
                    }
                }
                else
                    throw new BadImageFormatException();
            }            

            Load();
        }

        protected abstract void Load();

        public Assembly Assembly
        {
            get { return assembly; }
        }       
    }
}
