using System;
using System.Collections.Generic;
using System.Text;
using Ra2Reload.Core;
using Ra2Reload.Logic;
using SlimDX;
using SlimDX.Direct3D9;
using Ra2Reload.IsoMap;
using Ra2Reload.GraphicsEngine.Effects;

namespace Ra2Reload.GraphicsEngine
{
    public class Renderer
    {
        Atmosphere atmos;
        Terrain terrain;
        SceneManager sceneMgr;

        BattleField btfld;
        Device device;

        Camera camera;
        List<PostEffect> postEffects = new List<PostEffect>();

        public Camera Camera
        {
            get { return camera; }
            set { camera = value; }
        }

        public Renderer(Device dev, BattleField btfld, Atmosphere atmos, Terrain terrain, SceneManager sceneMgr)
        {
            this.device = dev;
            this.atmos = atmos;
            this.terrain = terrain;
            this.sceneMgr = sceneMgr;
            this.btfld = btfld;

        }
        public void Update(float dt)
        {
            camera.Update();
            atmos.Update(dt);
            terrain.SetTerrainLight(atmos.Light);
        }

        public Renderer(Device dev, BattleField btfld, Terrain terrain, MapBase map)
        {
            this.btfld = btfld;
            this.terrain = terrain;
            this.device = dev;
            atmos = new Atmosphere(device, map.Atmosphere);
            

            BoundingSphere bs = terrain.BoundingVolume;
            Vector3 min;
            Vector3 max;
            Vector3 extents = new Vector3(bs.Radius, bs.Radius, bs.Radius);

            Vector3.Add(ref bs.Center, ref extents, out max);
            Vector3.Subtract(ref bs.Center, ref extents, out min);

            sceneMgr = new SceneManager(dev);

            sceneMgr.RegisterCamera(camera);

            SceneNode node = new SceneNode(sceneMgr, null);
            node.AttchedObjects.Add(terrain);
            //node.AttchedObjects.Add(atmos);
            sceneMgr.AddChild(node);

        }
        public void RegisterPostEffect(PostEffect effect)
        {
            postEffects.Add(effect);
        }
        public void UnregisterPostEffect(PostEffect effect)
        {
            postEffects.Remove(effect);
        }
        public void Render()
        {
            sceneMgr.Render();
        }

    }
}
